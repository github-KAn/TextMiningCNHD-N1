new_list=["a","a", "a","a","b"]
text_collection=TextCollection(out_tokens)
print("\n text \n")
for text in new_list:
    print(text+":"+str(text_collection.tf_idf(text,new_list)))

words=out_tokens
word_freq = {}
freq = {}
for word in words:
    if word not in freq:
        freq[word] = 0
    # Increment the frequency of the word for a sentence
    freq[word] += 1
for word in freq:
    if word not in word_freq:
        word_freq[word] = 0
    # Increment the frequency of the word overall
    word_freq[word] += 1

# Frequency of terms in the document
print("freq of term: ",word_freq)


# import required module
from sklearn.feature_extraction.text import TfidfVectorizer

# Gán giá trị cho tài liệu
d0 = 'The cat jumped'
d1 = 'The white tiger roared'
d2 = 'Bird flying in the sky'

# Kết hợp tài liệu vào một tập hợp
# string = [d0, d1, d2]
string= ["The cat jumped",
        "The white tiger roared",
        "Bird flying in the sky"]
# Tạo đối tượng TfidfVectorier
tfidf = TfidfVectorizer()
# get tf-df values
result = tfidf.fit_transform(string)

# Lấy giá trị idf
print('\nidf values:')
for ele1, ele2 in zip(tfidf.get_feature_names_out(), tfidf.idf_):
    print(ele1, ':', ele2)

# Lấy chỉ số index
print('\nWord indexes:')
print(tfidf.vocabulary_)

# display tf-idf values
print('\ntf-idf value:')
print(result)

# in matrix form
print('\ntf-idf values in matrix form:')
print(result.toarray())

#TF-IDF
# doc1="Ben Studies Computer Lab"
# doc2="Steve teaches Brown University"
# doc3="Data scientists work large datasets"
# # doc4=[doc1,doc2,doc3]
# doc4={"doc1":doc1,"doc2":doc2,"doc3":doc3}
# doc4_str=doc1+doc2+doc3
# doc4_token=word_tokenize(doc4_str.lower())
# doc4_token=[word for word in doc4_token if word.isalpha() and word not in stopwords.words('english')]
# for term in doc4_token:
#     print(f"{term}: {inverseDocumentFrequency(term,doc4)}")

tfidf = TfidfVectorizer()

# get tf-df values
result = tfidf.fit_transform(string)

# get idf values
print('\nidf values:')
for ele1, ele2 in zip(tfidf.get_feature_names_out(), tfidf.idf_):
    print(ele1, ':', ele2)

# get indexing
print('\nWord indexes:')
print(tfidf.vocabulary_)

# display tf-idf values
print('\ntf-idf value:')
print(result)

# in matrix form
print('\ntf-idf values in matrix form:')
print(result.toarray())

with open('Processed Results/bow_text_rep.txt', 'w', encoding='utf-8') as file:
    file.write(str(word_counts))